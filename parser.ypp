%{
    #include <iostream>
    #include "hw3_output.hpp"
    #include "types.hpp"
    #include "symbols.hpp"
    #include <string>
    #include "generator.hpp"
    #include "cg.hpp"
    using namespace std;

    int yylex();
    void yyerror(const char*);
    extern int yylineno;
    extern char* yytext;
    extern ScopeStack* stack;
    CodeBuffer& cb = CodeBuffer::instance();
    std::string sp = freshVar();
    int countLoop = 0;
    std::vector<std::string> startLoop;
    std::vector<std::string> endLoop;
%}


%nonassoc INT
%nonassoc BYTE
%nonassoc B
%nonassoc BOOL
%nonassoc TRUE
%nonassoc FALSE
%nonassoc RETURN
%nonassoc IF
%nonassoc WHILE
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc SC
%nonassoc COMMENT
%nonassoc ID
%nonassoc NUM
%nonassoc STRING

%right ASSIGN

%left OR
%left AND
%left RELEQ
%left RELOP
%left ADDSUB
%left MULDIV
%right NOT
%left LPAREN
%left RPAREN
%right ELSE
%left LBRACE
%left RBRACE


%%

Program : { stack = new ScopeStack();
            stack->addScope(); stack->insertFunctions();
            generateMainStart(sp);

          } Statements {if(!yychar) {stack->removeScope(); delete stack;} generateMainEnd(); cb.printCodeBuffer();};

Statements :    Statement {$$ = new Statements(dynamic_cast<Statement*>($1));} |
                Statements Statement {$$ = new Statements(dynamic_cast<Statements*>($1),dynamic_cast<Statement*>($2));};

Statement : LBRACE {stack->addScope();} Statements {stack->removeScope();} RBRACE|
             Type ID SC {
                $$ = new Statement(dynamic_cast<Type*>($1), dynamic_cast<Id*>($2));
             } |
             Type ID ASSIGN Exp SC {
                $$ = new Statement(dynamic_cast<Type*>($1),dynamic_cast<Id*>($2),dynamic_cast<Exp*>($4));
             } |
             ID ASSIGN Exp SC {$$ = new Statement(dynamic_cast<Id*>($1), dynamic_cast<Exp*>($3));} |

             Call SC {$$ = new Statement($1);} |

             RETURN SC {$$ = new Statement(new Exp(), true);
                        cb.emit("ret i32 0");} |

             IF LPAREN Exp RPAREN M1 Statement {
                $$ = new Statement("IF", dynamic_cast<Exp*>($3));
                stack->removeScope();
                cb.emit(dynamic_cast<Exp*>($3)->falseLabel + ":");
             } |
             IF LPAREN Exp RPAREN M1 Statement ELSE N {stack->removeScope(); stack->addScope(); cb.emit(dynamic_cast<Exp*>($3)->falseLabel + ":");} Statement {
                $$ = new Statement("IF ELSE", dynamic_cast<Exp*>($3));
                stack->removeScope();
                cb.emit("br label %" + dynamic_cast<N*>($8)->next);
                cb.emit(dynamic_cast<N*>($8)->next + ":");
             } |

             WHILE LPAREN N2 Exp RPAREN {stack->addScope(); Exp::checkBool(dynamic_cast<Exp*>($4)); countLoop++; cb.emit(dynamic_cast<Exp*>($4)->trueLabel + ":");
              startLoop.push_back(dynamic_cast<N*>($3)->next);
              endLoop.push_back(dynamic_cast<Exp*>($4)->falseLabel);} Statement
             {new Statement("WHILE", dynamic_cast<Exp*>($3)); stack->removeScope(); countLoop--;
             cb.emit("br label %" + dynamic_cast<N*>($3)->next);
             cb.emit(dynamic_cast<Exp*>($4)->falseLabel + ":");
             startLoop.pop_back();
             endLoop.pop_back();} |

             BREAK SC {
                if (!countLoop) {
                    output::errorUnexpectedBreak(yylineno);
                    exit(1);
                }
                cb.emit("br label %" + endLoop.back());
             } |

             CONTINUE SC {
                if (!countLoop) {
                    output::errorUnexpectedContinue(yylineno);
                    exit(1);
                }
                cb.emit("br label %" + startLoop.back());
             };

M1 : %empty {
            Exp::checkBool(dynamic_cast<Exp*>($-1));
            stack->addScope();
            cb.emit(dynamic_cast<Exp*>($-1)->trueLabel + ":");
         }

N : %empty {
            $$ = new N(cb.freshLabel());
            cb.emit("br label %" + dynamic_cast<N*>($$)->next);
        }

N2 : %empty {
            $$ = new N(cb.freshLabel());
            cb.emit("br label %" +dynamic_cast<N*>($$)->next );
            cb.emit(dynamic_cast<N*>($$)->next + ":");
        }

Call : ID LPAREN Exp RPAREN {
            $$ = new Call(dynamic_cast<Id*>($1),dynamic_cast<Exp*>($3));
        };

Type :   INT {$$ = new Type("INT");} |
         BYTE {$$ = new Type("BYTE");} |
         BOOL {$$ = new Type("BOOL");};

Exp :    LPAREN Exp RPAREN {$$ = $2;} |
         Exp ADDSUB Exp {Exp::checkNumeric(dynamic_cast<Exp*>($1),dynamic_cast<Exp*>($3)); $$ = new Exp(Exp::resultType(dynamic_cast<Exp*>($1),dynamic_cast<Exp*>($3)));
                            opCommand(dynamic_cast<Exp*>($$), dynamic_cast<Exp*>($1),dynamic_cast<Exp*>($3),dynamic_cast<Operator*>($2));
                            }|

         Exp MULDIV Exp {Exp::checkNumeric(dynamic_cast<Exp*>($1),dynamic_cast<Exp*>($3)); $$ = new Exp(Exp::resultType(dynamic_cast<Exp*>($1),dynamic_cast<Exp*>($3)));
                            opCommand(dynamic_cast<Exp*>($$), dynamic_cast<Exp*>($1),dynamic_cast<Exp*>($3),dynamic_cast<Operator*>($2));
                             }|

         ID {
            $$ = new Exp(dynamic_cast<Id*>($1));
         } |

         Call {$$ = new Exp(dynamic_cast<Call*>($1)); dynamic_cast<Exp*>($$)->var = freshVar();} |
         NUM {$$ = new Exp("INT"); numCommand(dynamic_cast<Exp*>($$), dynamic_cast<Num*>($1)); } |
         NUM B { dynamic_cast<Num*>($1)->checkNumByte(); $$ = new Exp("BYTE"); numCommand(dynamic_cast<Exp*>($$), dynamic_cast<Num*>($1)); } |
         STRING {$$ = new Exp("STRING");} |
         TRUE {$$ = new Exp("BOOL"); trueCommand(dynamic_cast<Exp*>($$));} |
         FALSE {$$ = new Exp("BOOL"); falseCommand(dynamic_cast<Exp*>($$));} |
         NOT Exp {Exp::checkBool(dynamic_cast<Exp*>($2)); $$ = $2; notCommand(dynamic_cast<Exp*>($$));} |
         Exp AND { cb.emit(dynamic_cast<Exp*>($1)->trueLabel + ":"); } Exp {
            Exp::checkBool(dynamic_cast<Exp*>($1));
            Exp::checkBool(dynamic_cast<Exp*>($4));

            $$ = new Exp("BOOL");
            andCommand(dynamic_cast<Exp*>($$), dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($4));
         } |

         Exp OR { cb.emit(dynamic_cast<Exp*>($1)->falseLabel + ":"); } Exp {
            Exp::checkBool(dynamic_cast<Exp*>($1));
            Exp::checkBool(dynamic_cast<Exp*>($4));
            $$ = new Exp("BOOL");
            orCommand(dynamic_cast<Exp*>($$), dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($4));
         } |

         Exp RELOP Exp {Exp::checkNumeric(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3)); $$ = new Exp("BOOL");
         relopCommand(dynamic_cast<Exp*>($$), dynamic_cast<Exp*>($1),dynamic_cast<Exp*>($3),dynamic_cast<Operator*>($2)); } |
         Exp RELEQ Exp {Exp::checkNumeric(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3)); $$ = new Exp("BOOL");
         releqCommand(dynamic_cast<Exp*>($$), dynamic_cast<Exp*>($1),dynamic_cast<Exp*>($3),dynamic_cast<Operator*>($2));} |
         LPAREN Type RPAREN Exp {Type* type = dynamic_cast<Type*>($2);
                                     Exp* exp = dynamic_cast<Exp*>($4);
                                     Exp::checkCasting(type, exp);
                                     $$ = new Exp(exp, type);
                                     dynamic_cast<Exp*>($$)->var = freshVar();}

%%


void yyerror (const char*) { output::errorSyn(yylineno); exit(1);}

int main() {
    return yyparse();
}